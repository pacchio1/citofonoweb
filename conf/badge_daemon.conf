#Source program: prints code to stdout
source ./hid_read -t 3000000 -r 5 /dev/input/by-id/usb-Olimex_Ltd._MOD-RFID125-USBSTICK_Tag_Keyboard_OL35E4A000F4295-event-kbd

#Be verbose (0-1-2)
verbose 1

#Log file full path
logfile /var/log/badge_daemon/badge_daemon.log
#Pidfile
pidfile /var/run/badge_daemon.pid


#Choose one from below
#Helper program: reads code from stdin, does things and reports status on stdout

#-------------------------------------------------------------------------------
#Helper program 1:
#reads code from stdin, validates against db and turns relay on/off
#-------------------------------------------------------------------------------
helper ./door_open -f conf/badge_daemon.conf

#Status led configuration (leave empty to disable)
#test
led_on_command echo "debug: led on"
led_off_command echo "debug: led off"
#gpio
#led_on_command ./gpio.sh 17 out 1
#led_off_command ./gpio.sh 17 out 0
#piface
#led_on_command ./piface_tool 7 out 1
#led_off_command ./piface_tool 7 out 0

#Ignore same code for x second(s)
debounce 3

#Door configuration
#test
door_open_command echo "debug: door on"
door_close_command echo "debug: door off"
#gpio
#door_open_command ./gpio.sh 18 out 1
#door_close_command ./gpio.sh 18 out 0
#piface
#door_open_command ./piface_tool 1 out 1
#door_close_command ./piface_tool 1 out 0

#How much whe should keep the door open
doortime 1

#Alarm configuration
alarm_on_command
alarm_off_command

#How much whe should keep the pin on
#alarmtime 2

#SQLITE connection
#Database file
#dbfile citofonoweb.db

#MYSQL connection
dbhost localhost
dbname citofonoweb
dbuser citofonoweb
dbpassword citofonoweb
#Unique name for this device (unused on SQLITE)
id_device CitofonoWeb#1

#User-badge bindings table
#This table should at least contain: username | allowed | code
#See below for further details
badge_table users

#User code (enter a description in the userdata table)
user_colname user
#Allowed column name (if 0 this row will be ignored by the program)
allowed_colname allowed
#Code column name (the badge code)
code_colname rfid_code

#Acl table: the user is allowed only if a schedulation for him is found
acl_table acl
#As you can store acl for multiple devices, this field will be used to parse only acls for this device
#This device is identified by "id_device" configuration option (unused on SQLITE)
id_device_colname id_device
#References user_colname
user_acl_colname user
#Acl schedulation, in JSON format
sched_colname sched

#Userdata table: add personal data (optional) (unsupported on SQLITE)
userdata_table userdata
#References user_colname
user_userdata_colname user
#First and last name of this user
name_userdata_colname name
#Additional notes you may want to add (for example, organization)
notes_userdata_colname notes


#-------------------------------------------------------------------------------
#Helper program 2: (testing)
#reads code from stdin, validates against db and send to remote server via HTTP
#-------------------------------------------------------------------------------
#helper ./badge_logger -f conf/badge_daemon.conf

#Save uncommitted reads in this file
queuefile /var/lib/badge_daemon/badge_logger.queue

#Store at max this number of uncommitted reads
queuesize 1600

#If 0 seconds will not be stored in the timestamp
getseconds 0

#Call external program to parse and save data
datahandler ./remote_save_ssh.sh

#Data format (passed as parameter for datahandler)
#use printf format syntax: %s will be replaced with data
#1st occurrence of %s: timestamp
#2st occurrence of %s: badge code
params %s %s

#Retry interval when datahandler exits with error
interval 20

#Feedback to user via external program (facoltative)
#If specified, two params will be added to the command:
# - %s badge code
reporthandler ./text_feedback.sh
